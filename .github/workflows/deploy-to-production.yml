name: Deploy to Production

on:
  workflow_call:
    inputs:
      image-name:
        description: 'Docker image name to deploy'
        required: false
        type: string
    secrets:
      CLOUDFLARE_TUNNEL_DOMAIN:
        required: true
      API_URL:
        required: true
  workflow_dispatch:
    inputs:
      image-name:
        description: 'Docker image name to deploy'
        required: false
        type: string

env:
  IMAGE_NAME: ${{ inputs.image-name || format('ghcr.io/{0}/nx-multi-app:latest', github.repository) }}
  CONTAINER_NAME: nx-multi-app

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    outputs:
      deployment-status: ${{ steps.deploy.outcome }}
      image-name: ${{ env.IMAGE_NAME }}
      deployment-url: ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}

    steps:
      - name: Checkout repository # To remove?
        uses: actions/checkout@v3

      - name: Set up Cloudflared
        run: |
          echo "‚òÅÔ∏è Setting up Cloudflare tunnel..."
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install cloudflared

      - name: Setup SSH Configuration
        run: |
          echo "üîê Setting up SSH configuration..."
          mkdir -p ~/.ssh
          echo "${{ secrets.RASPBERRY_PI_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}
            User ${{ secrets.RASPBERRY_PI_USERNAME }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname %h
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Deploy to Raspberry Pi
        id: deploy
        run: |
          echo "üöÄ Starting deployment to Raspberry Pi..."
          echo "üì¶ Deploying image: ${{ env.IMAGE_NAME }}"

          echo "üìù Creating deployment script..."
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e

          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
          API_URL="${{ secrets.API_URL }}"

          echo "ÔøΩ Stopping existing container if running..."
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true

          echo "üóëÔ∏è Cleaning up old images..."
          docker image prune -f

          echo "üì• Pulling latest image..."
          docker pull $IMAGE_NAME

          echo "ÔøΩ Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 4200:80 \
            -p 4201:81 \
            -e API_URL="$API_URL" \
            $IMAGE_NAME

          echo "‚úÖ Deployment completed successfully"

          # Verify container is running
          echo "ÔøΩ Verifying container status..."
          docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          # Health check
          echo "üè• Performing health check..."
          sleep 10
          if docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep -q $CONTAINER_NAME; then
            echo "‚úÖ Container is running successfully"
          else
            echo "‚ùå Container failed to start"
            docker logs $CONTAINER_NAME
            exit 1
          fi
          EOF

          echo "üì§ Copying deployment script to Raspberry Pi..."
          scp deploy.sh ${{ secrets.RASPBERRY_PI_USERNAME }}@${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}:~/deploy.sh
          echo "üîë Executing deployment script on Raspberry Pi..."
          ssh ${{ secrets.RASPBERRY_PI_USERNAME }}@${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }} "chmod +x ~/deploy.sh && ~/deploy.sh"

          echo "üéâ Deployment to Raspberry Pi completed successfully!"

      - name: Cleanup SSH
        if: always()
        run: |
          echo "üßπ Cleaning up SSH keys..."
          rm -f ~/.ssh/id_rsa
          rm -f deploy.sh

  summary:
    needs: deploy-to-production
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Deployment Summary
        run: |
          echo "# üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | ${{ needs.deploy-to-production.outputs.deployment-status == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image** | \`${{ needs.deploy-to-production.outputs.image-name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target** | Raspberry Pi via ${{ needs.deploy-to-production.outputs.deployment-url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | ${{ github.workflow }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | ${{ github.run_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-to-production.outputs.deployment-status }}" == "success" ]]; then
            echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your application has been successfully deployed to the Raspberry Pi." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîó Access URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **App 1**: http://${{ needs.deploy-to-production.outputs.deployment-url }}:4200" >> $GITHUB_STEP_SUMMARY
            echo "- **App 2**: http://${{ needs.deploy-to-production.outputs.deployment-url }}:4201" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment to Raspberry Pi encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Troubleshooting Tips" >> $GITHUB_STEP_SUMMARY
            echo "1. Verify SSH connection and credentials" >> $GITHUB_STEP_SUMMARY
            echo "2. Check Docker image availability" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure Raspberry Pi has sufficient resources" >> $GITHUB_STEP_SUMMARY
            echo "4. Review container logs on the target system" >> $GITHUB_STEP_SUMMARY
          fi
