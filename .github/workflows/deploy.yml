name: Deploy

on:
  push:
    branches: [main]

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Important for pushing to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Replace dev environments with production URLs
        run: |
          echo "Replacing dev URLs with production URLs in environment files"
          echo "Here you can set your production URLs using GitHub secrets"
          echo "This replaces the localhost:8000 with production api url in the environments.ts file"
          sed -i 's|http://localhost:8000|${{ secrets.API_URL }}|g' libs/shared-lib/src/lib/environments.ts

      - name: Install dependencies
        run: npm ci

      - name: Get last successful commit SHA from this workflow
        id: last_success
        run: |
          echo "Trying to find last successful SHA for workflow 'Deploy' on branch ${{ github.ref_name }}"

          gh run list \
            --workflow="Deploy" \
            --branch=${{ github.ref_name }} \
            --status=success \
            --json headSha \
            --limit 1 > result.json

          LAST_SUCCESSFUL_SHA=$(jq -r '.[0].headSha // empty' result.json)

          if [ -z "$LAST_SUCCESSFUL_SHA" ]; then
            echo "⚠️ No successful run found. Falling back to origin/main"
            git fetch origin main
            LAST_SUCCESSFUL_SHA=$(git rev-parse origin/main)
          fi

          echo "🔍 Last successful/known good SHA for affected check: $LAST_SUCCESSFUL_SHA"
          echo "LAST_SUCCESSFUL_SHA=$LAST_SUCCESSFUL_SHA" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for gh CLI to access workflow runs

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow --tags # Ensure we have full history, without it sometimes it was failing for me

      - name: Run affected checks and builds
        run: npx nx affected --targets=lint,build,test --base=$LAST_SUCCESSFUL_SHA --head=HEAD --parallel=4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Check if app-1 build output exists
      - name: Check if app-1 build output exists
        id: app_1_exists
        run: |
          if [ -d "dist/apps/app-1" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image for app-1
        if: steps.app_1_exists.outputs.exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/app-1/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-app-1:latest
            ghcr.io/${{ github.repository }}-app-1:${{ github.sha }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Check if app-2 build output exists
      - name: Check if app-2 build output exists
        id: app_2_exists
        run: |
          if [ -d "dist/apps/app-2" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image for app-2
        if: steps.app_2_exists.outputs.exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/app-2/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-app-2:latest
            ghcr.io/${{ github.repository }}-app-2:${{ github.sha }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-raspberry:
    needs: [build-test-and-push]
    uses: ./.github/workflows/deploy-to-production.yml
    secrets:
      CLOUDFLARE_TUNNEL_DOMAIN: ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}
      RASPBERRY_PI_USERNAME: ${{ secrets.RASPBERRY_PI_USERNAME }}
      RASPBERRY_PI_SSH_KEY: ${{ secrets.RASPBERRY_PI_SSH_KEY }}
      SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
